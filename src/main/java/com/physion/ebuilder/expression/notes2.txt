Barry,

The ExpressionBuilder GUI now converts the RowData object that it
edits into an Expression object and prints that object out.
So, at this point, you can hand the ExpressionBuilder a RowData
expression tree and get back an Expression tree.
You eventually want to be able to hand ExpressionBuilder.editExpression()
an Expression tree instead of a RowData tree.  I.e. the fact that
the GUI uses the RowData object will not be exposed to the API that
you use.

I have just started writing the code to convert an Expression object
into a RowData object, and have a few questions about that.
First, let me confirm the RowData to Expression translation is correct.

I need to be sure that the Expression tree below is correct.
My concern is with how the tree is traversed.
(It is correct according to your answers in the "notes.txt" file,
but I want to be sure about this.)

RowData:
Epoch | All
  Epoch | epochGroup.source.label == "Test 27"

Expression:
OperatorExpression(and)
  OperatorExpression(==)
    OperatorExpression(.)
      OperatorExpression(.)
        AttributeExpression(epochGroup)
        AttributeExpression(source)
      AttributeExpression(label)
    StringLiteralValueExpression(Test 27)

The following is NOT correct:

Expression:
OperatorExpression(and)
  OperatorExpression(==)
    OperatorExpression(.)
      AttributeExpression(epochGroup)
      OperatorExpression(.)
        AttributeExpression(source)
        AttributeExpression(label)
    StringLiteralValueExpression(Test 27)

===================================================

Now look at the PARAMETERS_MAP attribute type:

Epoch | Any
  Epoch | protocolParameters.key(int) == "27"

Expression:
CUQ: Epoch
rootExpression:
OperatorExpression(or)
  OperatorExpression(==)
    OperatorExpression(.)
      OperatorExpression(as)
        OperatorExpression(parameter)
          StringLiteralValueExpression(protocolParameters)
          StringLiteralValueExpression(key)
        ClassLiteralValueExpression(IntegerValue)
      AttributeExpression(value)
    Int32LiteralValueExpression(27)

So if the first "epochGroup.source.label" Expression tree
I asked about at the start of these questions is correct,
then my thinking is that the following is how the
PARAMETERS_MAP attribute should be handled when it is nested.
Below is the output from the current translation code:

Epoch | Any
  Epoch | nextEpoch.nextEpoch.prevEpoch.protocolParameters.key(int) == "27"

Expression:
CUQ: Epoch
rootExpression:
OperatorExpression(or)
  OperatorExpression(==)
    OperatorExpression(.)
      OperatorExpression(.)
        OperatorExpression(.)
          OperatorExpression(.)
            AttributeExpression(nextEpoch)
            AttributeExpression(nextEpoch)
          AttributeExpression(prevEpoch)
        OperatorExpression(as)
          OperatorExpression(parameter)
            StringLiteralValueExpression(protocolParameters)
            StringLiteralValueExpression(key)
          ClassLiteralValueExpression(IntegerValue)
      AttributeExpression(value)
    Int32LiteralValueExpression(27)

===================================================

Some other questions.  These are kind of complicated, so if they
don't make sense, wait until we talk by Skype.

    The ClassLiteralValueExpression interface in your
    ExpressionTree.java file inherits the getValue()
    method from the LiteralValueExpression interface.
    Do we also want it to have a getClassName() method?
    I think this part of the API in your ExpressionTree.java 
    file was not fully formed when I started looking at it.

    I am assuming you expect the editExpression() method in the
    ExpressionBuilder GUI to take an IExpression object now instead
    of a RowData object.  If so, then we need to talk a bit about that.
    I created the class ExpressionTree which contains an IExpression
    but also has the method getClassUnderQualification().
    I think that method is necessary, but if not, how is the 
    Class Under Qualification method passed to the GUI via an
    IExpression object?

    Will the CUQ be passed as a string, i.e. the name, or will it 
    be passed as some sort of object?  The "original" ExpressionBuilder
    GUI API was passed a RowData object, so the CUQ was already in
    a form that the ExpressionBuilder, via the RowData object, understood.

    The Expression tree has different classes for the different types
    of LiteralValueExpression objects.  From the LiteralValueExpression
    object I can "usually" create the appropriate attributeValue and
    Attribute in the RowData object.  For example, if the Expression
    tree contains an AttributeExpression("startTime") that is compared
    to a TimeLiteralValueExpression(1/1/2011 10:00am), I know to create
    an Attribute object that is of Type.DATE_TIME and to create an attribute
    value that is a java.util.Date object.
    But, for other Attribute objects, the translation code will need
    to look at the DataModel in order to find out exactly what type
    of attributeValue to create.  E.g. INT_16 or INT_32.
    Also to create a RowData object's "attributePath", the translation
    code will need to look at the DataModel in order to know
    what sort of reference an AttributeExpression("epochs") really is.
    Is this correct, or am I not understanding something about the
    structure of an Expression tree.  (I realize the ExpressionTree
    file you wrote was a quick "conversion" from the C++ code.)

    Ask Barry whether "count" operator is handled properly.
