Barry,

I've got the beginnings of the RowData to Expression conversion
code working.  Below are a few test output examples in the format
that my code uses.  (The "left" operand is the first child row
of an OperatorExpression, and the "right" operand is the second
child row of an OperatorExpression.)

Please look them over and tell me if you see a problem.

=====================================================================

RowData:
Epoch | Any
  Epoch | protocolID == "abc"
  Epoch | protocolID =~~ "xyz"

Expression:
OperatorExpression(or)
  OperatorExpression(==)
    AttributeExpression(protocolID)
    StringLiteralValueExpression(abc)
  OperatorExpression(=~~)
    AttributeExpression(protocolID)
    StringLiteralValueExpression(xyz)

=====================================================================

RowData:
Epoch | All
  Epoch | incomplete == "true"

Expression:
OperatorExpression(and)
  OperatorExpression(==)
    AttributeExpression(incomplete)
    BooleanLiteralValueExpression(true)

=====================================================================

RowData:
Epoch | None
  Epoch | epochGroup.label == "Test 27"

Expression:
OperatorExpression(none?)
  OperatorExpression(==)
    OperatorExpression(.)
      AttributeExpression(epochGroup)
      AttributeExpression(label)
    StringLiteralValueExpression(Test 27)

=====================================================================

Please check that what I have implemented as far as "nesting" the "."
operator below is correct.

RowData:
Epoch | None
  Epoch | epochGroup.source.label == "Test 27"

Expression:
OperatorExpression(none?)
  OperatorExpression(==)
    OperatorExpression(.)
      OperatorExpression(.)
        AttributeExpression(epochGroup)
        AttributeExpression(source)
      AttributeExpression(label)
    StringLiteralValueExpression(Test 27)

=====================================================================

RowData:
Epoch | All
  Epoch | responses All
    Response | uuid == "xyz"

Expression:
OperatorExpression(and)
  OperatorExpression(all)
    AttributeExpression(responses)
    OperatorExpression(==)
      AttributeExpression(uuid)
      StringLiteralValueExpression(xyz)

=====================================================================

Below is the result of my implementation of the PARAMETERS_MAP
conversion from RowData to Expression based on your example
in ExpressionTree.java.  I have questions about it though.

RowData:
Epoch | All
  Epoch | protocolParameters.key(int) == "27"

Expression:
OperatorExpression(and)
  OperatorExpression(==)
    OperatorExpression(.)
      OperatorExpression(as)
        OperatorExpression(parameter)
          StringLiteralValueExpression(protocolParameters)
          StringLiteralValueExpression(key)
        ClassLiteralValueExpression(IntValue)
      AttributeExpression(value)
    Int32LiteralValueExpression(27)

Where does the string "parameter", used as an OperatorExpression
come from?  Is it always used if the attribute is of type
PARAMETERS_MAP?  I am guessing it is a sort of reserved word
in the system, just like "as" or "IntValue" is.

Where does the string "IntValue" come from?  Where can I find a
mapping for the other types (float, string, time) also?
I am simply using "BooleanValue", "StringValue", "IntValue",
"FloatValue", "TimeValue", for now.

Where does the string "value" come from also?  Is that always
used in this case?  I am guessing that "value" and "parameter"
are just part of the language and I can treat them as constants
much like the string "==" or "true".

=====================================================================

RowData:
Epoch | All
  Epoch | protocolParameters.key(time) == "Thu Oct 13 17:05:00 NZDT 2011"

Expression:
OperatorExpression(and)
  OperatorExpression(==)
    OperatorExpression(.)
      OperatorExpression(as)
        OperatorExpression(parameter)
          StringLiteralValueExpression(protocolParameters)
          StringLiteralValueExpression(key)
        ClassLiteralValueExpression(TimeValue)
      AttributeExpression(value)
    TimeLiteralValueExpression(Thu Oct 13 17:05:00 NZDT 2011)

=====================================================================

RowData:
Epoch | All
  Epoch | nextEpoch.prevEpoch.nextEpoch.protocolParameters.key(float) == "12.3"

Expression:
OperatorExpression(and)
  OperatorExpression(==)
    OperatorExpression(.)
      OperatorExpression(.)
        OperatorExpression(.)
          AttributeExpression(nextEpoch)
          AttributeExpression(prevEpoch)
        AttributeExpression(nextEpoch)
      AttributeExpression(protocolParameters)
    Float64LiteralValueExpression(12.3)

=====================================================================

Below are a few more RowData structures for which I have not yet
written conversion code.  I also show my guesses about how
they would be converted to Expression objects.  Can you go through
them and provide some feedback?

=====================================================================

How do we handle the None collection operator in the root row?
For example:

Epoch | None
  Epoch | protocolID == "abc"
  Epoch | protocolID =~~ "xyz"

Should I use the word "none" or should I "stack" the "not" operator
and the "or" operator like this?

OperatorExpression(not)
  OperatorExpression(or)
    OperatorExpression(==)
      AttributeExpression(protocolID)
      StringLiteralValueExpression(abc)
    OperatorExpression(=~~)
      AttributeExpression(protocolID)
      StringLiteralValueExpression(xyz)

=====================================================================

How do we handle a reference that is "is null"?
Is my use of ReferenceLiteralValueExpression correct?
Should the ReferenceListeralValueExpression.getObjectId() method
return null in the example below?

Epoch | All
  Epoch | owner is null

OperatorExpression("and")
  OperatorExpression("==")
    AttributeExpression("owner")
    ReferenceLiteralValueExpression(null)

=====================================================================

Same question as above for "is not null".  Do I simply change the
OperatorExpression to be "!="?

Epoch | All
  Epoch | owner is null

OperatorExpression("and")
  OperatorExpression("!=")
    AttributeExpression("owner")
    ReferenceLiteralValueExpression(null)

=====================================================================


Should there be both an Int16LiteralValueExpression and
an Int32LiteralValueExpression class?
