/**
 * Please note, this is not a compilable file.
 * It is not code in the application.
 * This file was written by Barry Wark and is based on the C++ API that
 * currently exists.  It is assumed that eventually Objectivity,
 * or someone else, will write code to implement an API like this.
 * This file was merely meant as a rough guide to give Steve Ford an
 * idea of how the Java API will eventually look.
 *
 * Steve Ford took the example code in this file and used it to create
 * the package that is in the directory:
 *
 *      trunk/src/com/physion/ovation/gui/ebuilder/expression
 *
 * That directory contains the set of Java interfaces that are modeled
 * on the rough code in this file.  That directory also contains
 * a set of classes that implement the interfaces.  Eventually, we
 * assume that the code in that package will be thrown away and
 * the "real" Java version of the code written by Objectivity will
 * be used.
 *
 * Please note, you can probably delete this file because it is
 * not really needed any more.
 */

package com.physion.ebuilder.expression;


/*
Expression is the base interface for building expression trees that describe a query predicate. Expression
trees are essentially ASTs for the query language (currently PQL) and should be transformable to and from
the ebuilder.datamodel.RowData.

An expression tree is made of expression nodes in such a way that:
The head expression node's result type is Boolean.
Intermediate level nodes (non leaves) are OperatorExpression nodes, which can have a number of other expression nodes as their operands.
Leaf nodes are value expression nodes of type AttributeValueExpression or LiteralValueExpression.

Some simple RowData <=> Expression examples:


1.
Epoch | Any
  Epoch | protocolID == "abc"



					OperatorExpression("or")
							  |
					OperatorExpression("==")
							/		\
AttributeExpression("protocolID")  StringLiteralValueExpression("abc")


2.
Epoch | All
  Epoch | protocolID == "abc"


					OperatorExpression("and")
							  |
					OperatorExpression("==")
							/		\
AttributeExpression("protocolID")  StringLiteralValueExpression("abc")


3.
Epoch | All
  Epoch | protocolParameters.key(int) == 1


												OperatorExpression("and")
															|
												OperatorExpression("==")
												/						\
											OperatorExpression(".")		IntLiteralValueExpression(1)
											/					\
							OperatorExpression("as")		AttributeExpression("value")
										/		\
			OperatorExpression("parameter") 	ClassLiteralValueExpression("IntValue")
					/			\
				   |		StringLiteralValueExpression("key")
  				  |
				 |
StringLiteralValueExpression("protocolParameters")

4.
Epoch | All
  Epoch | responses All
    Response | uuid == "xyz"


									OperatorExpression("and")
												|
									OperatorExpression("all")
										/		\
			AttributeExpression("responses")	OperatorExpression("==")
													/		\
							AttributeExpression("uuid") 	StringLiteralValueExpression("xyz")


NOTE: per-user to-many associations would map like the above, with the exception that AttributeExpression("responses")
would be replaced with OperatorExpression("keywords") [for "All keywords"], or OperatorExpression("mykeywords") for
"My keywords", etc.

5.
Epoch | Any
  Epoch | Any Property.key(int) == "1"

											OperatorExpression("or")
														|
											OperatorExpression("any")
											/					\
										   |				OperatorExpression("==")
										   |					/					\
				OperatorExpression("elementsOfType")  AttributeExpression("value")	IntLiteralValueExpression(1)
					/							\
OperatorExpression("properties")		ClassLiteralValueExpression("IntValue")
				|
	StringLiteralValue("key")
*/

public interface Expression {

    void accept(ExpressionVisitor visitor);

}


/*
An Expression representing an operator expression with (ordered) operands.

The operator is defined by an operator name.

Implmentations should implement the visitor pattern to traverse operands in order after traversing
the operator expression.
*/
public interface OperatorExpression extends Expression {

	/*
	The name of the operator (e.g. "=", "!=", ">=", "properties", "any", "all", etc.)
	*/
    String getOperatorName();

	/*
	The list of ordered operands to this operator.
	*/
    List<Expression> getOperandList();
}


/*
A LiteralValueExpression is an abstract Expression extension that defines a literal value. Subclasses for each of
the basic types (int, unsigned int, float, string, datetime, etc. should be defined as well). These are
all prety straight forward with th exception of the class and reference literal value which are given below.

*/
public interface LiteralValueExpression extends Expression {
    Object getValue();
}

public interface ClassLiteralValueExpression extends LiteralValueExpression {

	//Not sure yet whether we want String or Class<? extends ooObj>
	String getClassName();
	//or
	Class<? extends ooObj> getClass();

}

/**
Represents a literal reference value. The ebuilder currently doesn't support this type, but
we may want to in the future. It's certainly both legal in PQL and as a concept in querying an
object graph.
*/
public interface ReferenceLiteralValueExpression extends LiteralValueExpression {

	// This is the only place where it seems that Objectivity leaks through the Expression tree abstraction...
	// we may need to discuss this one.
	ooId getObjectId();
}

/**
An AttributeExpression represents the value of an attribute (basic, reference or collection) of the qualification object. It may be combined with the '.'
operator to produce a pathed attribute expression.
*/

public interface AttributeExpression extends Expression {
    String getAttributeName();
}

/*
From the Objectivity docs:
The visitor pattern1 is used to provide the extensibility for adding new operations on the ooExpression tree structure. The visitor pattern allows you to define a new operation to be performed on elements in a class structure without changing and recompiling the classes. The class ooExpressionVisitor is the base class for user-defined expression visitor classes that add operations to be performed on the expression nodes. In order for the expression classes to perform the user-added operation, the accept(ooExpressionVisitor* visitor) method, which takes a visitor (a concrete ooExpressionVisitor instance) as an argument, is provided on all expression node classes.
To add and perform a new operation on all nodes in the expression tree structure:
Define a concrete expression-visitor class derived from ooExpressionVisitor (called specificExpressionVisitor from this point on), and implement the new operation on each type of expression by implementing all the virtual visit methods defined in ooExpressionVisitor:
o visitOperator()
o visitAtributeValue()
o visitIntLiteralValue()
o visitUIntLiteralValue()
o visitFloatLiteralValue()
o visitStringLiteralValue()
o visitBoolLiteralValue(), and so forth.
The visitOperator() method returns a boolean type to indicate whether or not the operation needs to be populated to its operands (to call the accept() method of its operands from the accept() method of the operator expression).
Create an instance of the specificExpressonVisitor (called specificVisitorPtr from this point on).
1 Erich Gamma, Richard Helm, Ralph Johnson, John M. Vlissides, Design Patterns, Elements of Reusable Object-Oriented Software, Addison-Wesley Professional Computing Series
￼￼￼￼￼17
Perform the operation implemented by specificExpressionVisitor on the expression tree nodes by calling the function accept(specificVisitorPtr) from the head predicate expression, and passing in the reference to the specific visitor instance as an argument.
The operation will be performed on the head node first, then populated to all its operands as the operator expression's accept() method calls its operands' accept() method (if visitOperator() returns true). The whole tree will be traversed, and the new defined operation will be performed on each expression node automatically as it is visited.
*/

public interface ExpressionVisitor {
    boolean visitOperator(); //return true to indicate visitor needs to see operands
    void visitAttributeValue();
    void visitIntLiteralValue();
    void visitUIntLiteralValue();
    void visitFloatLiteralValue();
    void visitStringLiteralValue();
    void visitBoolLiteralValue();
    // visit methods for all expression types...
}
